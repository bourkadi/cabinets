package com.bourgadix.dao;

// Generated 31 mars 2015 00:48:58 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.Session;
import org.hibernate.search.FullTextSession;
import org.hibernate.search.Search;
import org.hibernate.search.annotations.Analyze;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.annotations.Store;
import org.hibernate.search.query.dsl.QueryBuilder;

/**
 * Client generated by hbm2java
 */
@Entity
@Table(name = "client", catalog = "cabinets")
@Indexed
public class Client implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 2547185259527620240L;
	private Integer idclient;
	@IndexedEmbedded
	@ManyToOne
	private Country country;
	@IndexedEmbedded
	@ManyToOne
	private User users;
	@IndexedEmbedded
	@ManyToOne
	private Sexe sexe;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String name;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String lastname;
	private Date birthdate;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String birthplace;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String identityNumber;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String phone;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String phonefix;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String adress;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String note;
	private int createdDate;
	private Set<Visit> visits = new HashSet<Visit>(0);

	public Client() {
	}

	public Client(Country country, User users, Sexe sexe, String name,
			String lastname, Date birthdate, String birthplace, String phone,
			String phonefix, String adress, String note, Set<Visit> visits) {
		this.country = country;
		this.users = users;
		this.sexe = sexe;
		this.name = name;
		this.lastname = lastname;
		this.birthdate = birthdate;
		this.birthplace = birthplace;
		this.phone = phone;
		this.phonefix = phonefix;
		this.adress = adress;
		this.note = note;
		this.visits = visits;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "idclient", unique = true, nullable = false)
	public Integer getIdclient() {
		return this.idclient;
	}

	public void setIdclient(Integer idclient) {
		this.idclient = idclient;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "nationality")
	public Country getCountry() {
		return this.country;
	}

	public void setCountry(Country country) {
		this.country = country;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "user")
	public User getUsers() {
		return this.users;
	}

	public void setUsers(User users) {
		this.users = users;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "sexe")
	public Sexe getSexe() {
		return this.sexe;
	}

	public void setSexe(Sexe sexe) {
		this.sexe = sexe;
	}

	@Column(name = "name", length = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "lastname", length = 45)
	public String getLastname() {
		return this.lastname;
	}

	public void setLastname(String lastname) {
		this.lastname = lastname;
	}

	@Column(name = "identity_number", length = 45)
	public String getIdentityNumber() {
		return identityNumber;
	}

	public void setIdentityNumber(String identityNumber) {
		this.identityNumber = identityNumber;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "birthdate", length = 10)
	public Date getBirthdate() {
		return this.birthdate;
	}

	public void setBirthdate(Date birthdate) {
		this.birthdate = birthdate;
	}

	@Column(name = "birthplace", length = 200)
	public String getBirthplace() {
		return this.birthplace;
	}

	public void setBirthplace(String birthplace) {
		this.birthplace = birthplace;
	}

	@Column(name = "phone", length = 45)
	public String getPhone() {
		return this.phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	@Column(name = "phonefix", length = 45)
	public String getPhonefix() {
		return this.phonefix;
	}

	public void setPhonefix(String phonefix) {
		this.phonefix = phonefix;
	}

	@Column(name = "adress", length = 65535)
	public String getAdress() {
		return this.adress;
	}

	public void setAdress(String adress) {
		this.adress = adress;
	}

	@Column(name = "note", length = 65535)
	public String getNote() {
		return this.note;
	}

	public void setNote(String note) {
		this.note = note;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "client")
	public Set<Visit> getVisits() {
		return this.visits;
	}

	public void setVisits(Set<Visit> visits) {
		this.visits = visits;
	}

	@Column(name = "created_date")
	public int getCreatedDate() {
		return createdDate;
	}

	public void setCreatedDate(int createdDate) {
		this.createdDate = createdDate;
	}

	private static void doIndex() throws InterruptedException {
		Session session = HibernateUtils.getSessionFactory().openSession();

		FullTextSession fullTextSession = Search.getFullTextSession(session);
		fullTextSession.createIndexer().startAndWait();

		fullTextSession.close();
		session.flush();
		session.close();
	}

	public static List<Client> search(String queryString) {
		Session session = HibernateUtils.getSessionFactory().openSession();
		FullTextSession fullTextSession = Search.getFullTextSession(session);

		QueryBuilder queryBuilder = fullTextSession.getSearchFactory()
				.buildQueryBuilder().forEntity(Client.class).get();
		org.apache.lucene.search.Query luceneQuery = queryBuilder.keyword()
				.onFields("name", "lastname", "phone", "birthplace","sexe.sexe")
				.matching(queryString).createQuery();

		// wrap Lucene query in a javax.persistence.Query
		org.hibernate.Query fullTextQuery = fullTextSession
				.createFullTextQuery(luceneQuery, Client.class);

		List<Client> contactList = fullTextQuery.list();

		fullTextSession.close();
		return contactList;
	}

	public static void main(String[] args) throws InterruptedException {
		 doIndex();
		/*int i = 0;
		for (Client string : search("female")) {
			System.out.println(string.getName());
			i++;
		}
		System.out.println(i);*/
	}
}
