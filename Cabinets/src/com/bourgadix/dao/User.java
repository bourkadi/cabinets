package com.bourgadix.dao;

// Generated 31 mars 2015 00:48:58 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.search.annotations.Analyze;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.Store;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "cabinets", uniqueConstraints = { @UniqueConstraint(columnNames = "email"),
		@UniqueConstraint(columnNames = "username") })
@Indexed
public class User implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8879134264382342671L;
	private Integer idUser;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String username;
	private String password;
	private Boolean enabled;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String email;
	private int creationDate;
	private int lastConnectedTime;
	private Boolean connected;
	private Set<VisitHistory> visitHistories = new HashSet<VisitHistory>(0);
	private Set<Visit> visits = new HashSet<Visit>(0);
	private Set<Client> clients = new HashSet<Client>(0);
	private Set<Role> roles = new HashSet<Role>(0);

	public User() {
	}

	public User(String username, String password) {
		this.username = username;
		this.password = password;
	}

	public User(String username, String password, Boolean enabled, String email, Set<VisitHistory> visitHistories,
			Set<Visit> visits, Set<Client> clients) {
		this.username = username;
		this.password = password;
		this.enabled = enabled;
		this.email = email;
		this.visitHistories = visitHistories;
		this.visits = visits;
		this.clients = clients;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "idUser", unique = true, nullable = false)
	public Integer getIdUser() {
		return this.idUser;
	}

	public void setIdUser(Integer idUser) {
		this.idUser = idUser;
	}

	@Column(name = "username", unique = true, nullable = false, length = 45)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false, length = 128)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "enabled", length = 45)
	public Boolean getEnabled() {
		return this.enabled;
	}

	public void setEnabled(Boolean enabled) {
		this.enabled = enabled;
	}

	@Column(name = "email", unique = true, length = 45)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<VisitHistory> getVisitHistories() {
		return this.visitHistories;
	}

	public void setVisitHistories(Set<VisitHistory> visitHistories) {
		this.visitHistories = visitHistories;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Visit> getVisits() {
		return this.visits;
	}

	public void setVisits(Set<Visit> visits) {
		this.visits = visits;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Client> getClients() {
		return this.clients;
	}

	public void setClients(Set<Client> clients) {
		this.clients = clients;
	}

	@Column(name = "creation_date")
	public int getCreationDate() {
		return creationDate;
	}

	public void setCreationDate(int creationDate) {
		this.creationDate = creationDate;
	}

	@Column(name = "last_connected_time")
	public int getLastConnectedTime() {
		return lastConnectedTime;
	}

	public void setLastConnectedTime(int lastConnectedTime) {
		this.lastConnectedTime = lastConnectedTime;
	}

	@Column(name = "connected")
	public Boolean getConnected() {
		return connected;
	}

	public void setConnected(Boolean connected) {
		this.connected = connected;
	}

	@OneToMany(fetch = FetchType.EAGER, targetEntity = Role.class, cascade = CascadeType.ALL)
	@JoinTable(name = "user_roles", joinColumns = { @JoinColumn(name = "idUser") }, inverseJoinColumns = {
			@JoinColumn(name = "idrole") })
	public Set<Role> getRoles() {
		return roles;
	}

	public void setRoles(Set<Role> roles) {
		this.roles = roles;
	}

	public static void main(String[] args) {
		DaoService daoService = new Dao();
		User user = new User();
		user.setUsername("amine");
		user.setEnabled(true);
		user.setPassword("$2a$11$Ie8v6/uf5udc.fi7UVGAa.rdVN6rCDaW.xtKGSMJnIYCS5ujuUpFW");
		daoService.save(user);
	}
}
